input { 
	beats {
	    port => 5044
	    host => "0.0.0.0"
  	}
}

filter {
#    if [type] == "rto" {
#        if [message] =~ /^{.*}$/ {
#            json { source => message }
#            mutate {
#                replace => [ "message", "%{message}" ]
#                gsub => [ 'message','\n','']
#                add_tag => ["json_logformat","grokked"]
#            }
#        }
            date {
                match => [ "timestamp", "ISO8601" ]
                target => "timestamp"
            }

             if [event_status] == "STARTED" {
                aggregate {
                    task_id => "%{user_id}C%{event_id}"
                    code => "
                    map['started'] = event.get('timestamp')
                    "
                    map_action => "create"
                }
            }

             if [event_status] == "SUCCESS" or [event_status] == "FAILURE" {
                aggregate {
                    task_id => "%{user_id}C%{event_id}"
                    code => "
                    event.set('started', map['started'])
                    event.set('ended', event.get('timestamp'))
                    event.set('duration', event.get('ended') - event.get('started'))
                    "
                    map_action => "update"
                    end_of_task => true
                    timeout => 600
                }
            }

            if [event_id] == "USER_APPLIED" and [event_status] == "STARTED" {
                aggregate {
                    task_id => "%{user_id}_total"
                    code => "
                    map['applied'] = event.get('timestamp')
                    "
                    map_action => "create"
                }
            }

             if [event_id] == "BV_STRATEGY" and [event_status] == "SUCCESS"{
                aggregate {
                    task_id => "%{user_id}_total"
                    code => "
                    event.set('applied', map['applied'])
                    event.set('finished', event.get('timestamp'))
                    event.set('total_wait', event.get('finished') - event.get('applied'))
                    "
                    map_action => "update"
                    end_of_task => true
                    timeout => 600
                }
            }
    }
#}


output { 
	elasticsearch { 
		hosts => elasticsearch
		manage_template => false
    	index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
	} 
	
    stdout { codec => rubydebug }
}